#---
#apiVersion: v1
#kind: Namespace
#metadata:
#  name: monitor
---
apiVersion: v1
kind: Service
metadata:
  name: zk-svc
  namespace: monitor
  labels:
    app: zk-svc
spec:
  ports:
  - port: 2888
    name: server
  - port: 3888
    name: leader-election
  clusterIP: None
  selector:
    app: zk
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: zk-cm
  namespace: monitor
data:
  jvm.heap: "1G"
  tick: "2000"
  init: "10"
  sync: "5"
  client.cnxns: "60"
  snap.retain: "3"
  purge.interval: "0"
---
apiVersion: policy/v1beta1
kind: PodDisruptionBudget
metadata:
  name: zk-pdb
  namespace: monitor
spec:
  selector:
    matchLabels:
      app: zk
  minAvailable: 2
---
apiVersion: apps/v1beta1
kind: StatefulSet
metadata:
  name: zk
  namespace: monitor
spec:
  serviceName: zk-svc
  replicas: 3
  template:
    metadata:
      labels:
        app: zk
    spec:
      affinity:
        podAntiAffinity:
          requiredDuringSchedulingIgnoredDuringExecution:
            - labelSelector:
                matchExpressions:
                  - key: "app"
                    operator: In
                    values:
                    - zk
              topologyKey: "kubernetes.io/hostname"
      containers:
      - name: k8szk
        imagePullPolicy: Always
        image: dockerhub.pentium.network/master/zookeeper:v3
        resources:
          requests:
            memory: "2Gi"
            cpu: "500m"
        ports:
        - containerPort: 2181
          name: client
        - containerPort: 2888
          name: server
        - containerPort: 3888
          name: leader-election
        env:
        - name : ZK_REPLICAS
          value: "3"
        - name : ZK_HEAP_SIZE
          valueFrom:
            configMapKeyRef:
                name: zk-cm
                key: jvm.heap
        - name : ZK_TICK_TIME
          valueFrom:
            configMapKeyRef:
                name: zk-cm
                key: tick
        - name : ZK_INIT_LIMIT
          valueFrom:
            configMapKeyRef:
                name: zk-cm
                key: init
        - name : ZK_SYNC_LIMIT
          valueFrom:
            configMapKeyRef:
                name: zk-cm
                key: tick
        - name : ZK_MAX_CLIENT_CNXNS
          valueFrom:
            configMapKeyRef:
                name: zk-cm
                key: client.cnxns
        - name: ZK_SNAP_RETAIN_COUNT
          valueFrom:
            configMapKeyRef:
                name: zk-cm
                key: snap.retain
        - name: ZK_PURGE_INTERVAL
          valueFrom:
            configMapKeyRef:
                name: zk-cm
                key: purge.interval
        - name: ZK_CLIENT_PORT
          value: "2181"
        - name: ZK_SERVER_PORT
          value: "2888"
        - name: ZK_ELECTION_PORT
          value: "3888"
        command:
        - sh
        - -c
        - zkGenConfig.sh && zkServer.sh start-foreground
        securityContext:
          privileged: true
        readinessProbe:
          exec:
            command:
            - "zkOk.sh"
          initialDelaySeconds: 10
          timeoutSeconds: 5
        livenessProbe:
          exec:
            command:
            - "zkOk.sh"
          initialDelaySeconds: 10
          timeoutSeconds: 5
        volumeMounts:
        - name: datadir
          mountPath: /var/lib/zookeeper/data
      securityContext:
        runAsUser: 1000
        fsGroup: 1000
#      volumes:
#      - name: datadir
#        hostPath:
#          path: /opt/zookeeper/data
  updateStrategy:
    type: RollingUpdate
  volumeClaimTemplates:
  - metadata:
      name: datadir
    spec:
      accessModes: [ "ReadWriteOnce" ]
      storageClassName: example-nfs
      resources:
        requests:
          storage: 1Gi
---
apiVersion: v1
kind: Service
metadata:
  name: kafka-svc
  namespace: monitor
  labels:
    app: kafka
spec:
  ports:
  - port: 9092
    name: server
  clusterIP: None
  selector:
    app: kafka
---
kind: StatefulSet
apiVersion: apps/v1beta1
metadata:
  name: kafka
  namespace: monitor
spec:
  serviceName: kafka-svc
  replicas: 3
  template:
    metadata:
      labels:
        app: kafka
    spec:
      affinity:
        podAntiAffinity:
          requiredDuringSchedulingIgnoredDuringExecution:
            - labelSelector:
                matchExpressions:
                  - key: "app"
                    operator: In
                    values:
                    - kafka
              topologyKey: "kubernetes.io/hostname"
        podAffinity:
          preferredDuringSchedulingIgnoredDuringExecution:
             - weight: 1
               podAffinityTerm:
                 labelSelector:
                    matchExpressions:
                      - key: "app"
                        operator: In
                        values:
                        - zk
                 topologyKey: "kubernetes.io/hostname"
      terminationGracePeriodSeconds: 300
      initContainers:
      - name: init-myservice
        image: dockerhub.pentium.network/master/busybox:latest
        # use service port not container port
        command: ['sh', '-c', 'until nc -v -z -w 1 zk-2.zk-svc 2181 ; do echo waiting for myservice; sleep 2; done;']
      - name: sleepforit
        image: dockerhub.pentium.network/master/busybox:latest
        command: ['sh', '-c', 'sleep 5s']
      containers:
      - name: kafka
        image: dockerhub.pentium.network/master/kafka:1.4
        ports:
        - containerPort: 9092
        env:
        - name: ZOOKEEPER
          value: "zk-0.zk-svc:2181,zk-1.zk-svc:2181,zk-2.zk-svc:2181"
        - name: KAFKA_ADVERTISED_PORT
          value: "9092"
        - name: MY_POD_NAME
          valueFrom:
            fieldRef:
              fieldPath: metadata.name
        - name: MY_POD_NAMESPACE
          valueFrom:
            fieldRef:
              fieldPath: metadata.namespace
        - name: LOGRETENTION
          value: "24"
        - name: PARTITION_NUMBER
          value: "1"
        volumeMounts:
        - name: log
          mountPath: /tmp
        resources:
          requests:
            memory: "1Gi"
            cpu: 500m
        securityContext:
          privileged: true
#      volumes:
#      - name: log
#        hostPath:
#          path: /opt/kafka
  updateStrategy:
    type: RollingUpdate
  volumeClaimTemplates:
  - metadata:
      name: log
    spec:
      accessModes: [ "ReadWriteOnce" ]
      storageClassName: example-nfs
      resources:
        requests:
          storage: 5Gi
---
apiVersion: v1
kind: ServiceAccount
metadata:
  name: fluentd
  namespace: monitor
---
apiVersion: extensions/v1beta1
kind: DaemonSet
metadata:
  name: fluentd
  namespace: monitor
  labels:
    k8s-app: fluentd-logging
    version: v1
    kubernetes.io/cluster-service: "true"
    app: fluentd
spec:
  updateStrategy:
    type: RollingUpdate
  minReadySeconds: 15
  template:
    metadata:
      labels:
        k8s-app: fluentd-logging
        version: v1
        kubernetes.io/cluster-service: "true"
        app: fluentd
    spec:
      serviceAccount: fluentd
      serviceAccountName: fluentd
      tolerations:
      - key: node-role.kubernetes.io/master
        effect: NoSchedule
      containers:
      - name: fluentd
        image: dockerhub.pentium.network/master/pentium-fluentd:0.86.20190416195707
        imagePullPolicy: Always
        resources:
          limits:
            cpu: 200m
        envFrom:
        - configMapRef:
            name: host-info
        - configMapRef:
            name: fluentd-env
        env:
        - name: POD_NAMESPACE
          valueFrom:
            fieldRef:
              apiVersion: v1
              fieldPath: metadata.namespace
        - name: FLUENTD_ELASTICSEARCH_IP
          valueFrom:
            configMapKeyRef:
              name: host-info
              key: data01
        ports:
        - containerPort: 24224
        volumeMounts:
        - mountPath: /fluentd/etc/certs
          name: pn-fluentd-certs-config
        - mountPath: /etc/localtime
          name: time
        - name: varlibdockercontainers
          mountPath: /var/lib/docker/containers
          readOnly: true
        - name: varlog
          mountPath: /var/log
      volumes:
      - name: pn-fluentd-certs-config
        secret:
          secretName: fluentd-certs
#        hostPath:
#          path: /opt/fluentd/data/certs
      - name: time
        hostPath:
          path: /etc/localtime
      - name: varlibdockercontainers
        hostPath:
          path: /var/lib/docker/containers
      - name: varlog
        hostPath:
          path: /var/log
---
kind: Service
apiVersion: v1
metadata:
  name: fluentd
  namespace: monitor
spec:
  selector:
    app: fluentd
  ports:
  - protocol: TCP
    port: 34224
    targetPort: 24224
---
kind: Secret
metadata:
  name: fluentd-certs
type: Opaque
apiVersion: v1
data:
  fluentd.crt: aaa
  fluentd.key: bbb
